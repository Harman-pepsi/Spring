<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--    把对象交给Spring管理-->
    <!--Spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->
    <!-- 创建Bean的三种方式-->
    <!-- 第一种方式:适用默认构造函数创建
        在Spring的配置文件中适用bean标签，配以id和class属性之后，且没有其他属性和标签时。
        采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建

    <bean id="accountService" class="cn.demo.service.impl.AccountServiceImpl"></bean>

    -->

    <!-- 第二种方式 使用工厂中的非静态方法进行创建(或者使用某个类中的方法进行创建，并存入spring容器)

   <bean id="beanFactory" class="cn.demo.factory.BeanFactory"></bean>
   <bean id="accountService" factory-bean="beanFactory" factory-method="getAccountService"></bean>

   -->

    <!-- 第三种方式 使用工厂中的静态方法进行创建(或者使用某个类中的静态方法进行创建，并存入spring容器)

   <bean id="accountService" class="cn.demo.factory.BeanFactory" factory-method="getAccountService"/>

    -->

    <!-- bean的作用域范围
   bean的标签scope属性:
      作用:用于指定bean的作用范围
      取值:
         singleton:单例(默认)
         prototype:原型(多例)
         request:作用于web的请求范围
         session:作用于web的会话范围
         global-session:作用于集群环境的会话范围(全局会话范围)，当不是集群环境时，它就是session

    <bean id="accountService" class="cn.demo.service.impl.AccountServiceImpl" scope="singleton"></bean>
    <bean id="accountService" class="cn.demo.service.impl.AccountServiceImpl" scope="prototype"></bean>

    -->

    <!--bean对象的生命周期
      单例对象:
         出生：当容器对象创建时出生
         活着：只要容器存在，对象一直存在
         死亡:容器销毁，对象消亡
         总结:单例对象的生命周期和容器相同
      多例对象:
         出生:当我们使用对象时spring框架为我们创建
         活着:对象只要在使用中就一直活着
         死亡:当对象长时间不用且没有别的对象引用时，由Java的垃圾回收器进行回收

    <bean id="accountService" class="cn.demo.service.impl.AccountServiceImpl" init-method="init" destroy-method="destory" scope="singleton"></bean>

    -->

    <!-- spring依赖注入
     依赖注入:
        Dependency Injection
     IOC的作用:
        降低程序间的耦合(依赖关系)
     依赖关系的处理:
        以后都交给spring来维护
      在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
      依赖关系的维护:
        就称为依赖注入
      依赖注入:
        能注入的数据：有三类
           基本类型和String
           其他bean类型（在配置文件中或者注解配置过的bean）
           复杂类型/集合类型
       注入的方式:有三种
           第一种:使用构造函数提供
           第二种:使用set方法提供
           第三种:使用注解提供
  -->
    <!-- 构造函数注入
          使用标签:construct-arg
          标签出现的位置:bean标签的内部
          标签中的属性
             type:用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
             index:用于指定要注入的数据在构造函数中的指定索引位置的参数赋值。索引的位置是从0开始
             name:用于指定给构造函数中指定名称的参数赋值（常用的）
             ===================以上三个用于指定给构造函数中哪个参数赋值==============================
             value:用于给基本类型和String类型的数据
             ref:用于指定其他的bean类型数据。它指的就是在spring的IOC容器中出现过的bean对象
          优势:
             在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功
          弊端:
             改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。
    -->
<!--    <bean id="accountService" class="cn.demo.service.impl.AccountServiceImpl">-->
<!--        <constructor-arg type="java.lang.Integer" value="1"/>-->
<!--        <constructor-arg type="java.lang.String" value="test"/>-->
<!--        <constructor-arg type="java.lang.String" value="123456"/>-->

<!--        <constructor-arg index="0" value="2"></constructor-arg>-->
<!--        <constructor-arg index="1" value="Test"></constructor-arg>-->
<!--        <constructor-arg index="2" value="666666"></constructor-arg>-->

<!--        <constructor-arg name="id" value="3"></constructor-arg>-->
<!--        <constructor-arg name="username" value="Jack"></constructor-arg>-->
<!--        <constructor-arg name="password" value="888888"></constructor-arg>-->
<!--    </bean>-->

    <!-- 配置一个日期对象 -->
<!--    <bean id="now" class="java.util.Date"></bean>-->
    <!-- set方法注入 （更常用的方式）
     涉及的标签: property
     出现的位置: bean标签的内部
     标签的属性:
        name:用于指定注入时所调用的set方法名称
        value:用于提供基本类型和String类型的数据
        ref:用于指定其他的bean类型数据。它指的就是在spring的IOC核心容器中出现过的bean对象
     优势:
        创建对象时没有明确的限制，可以直接使用默认构造函数
     弊端:
        如果某个成员必须有值，则获取对象时有可能set方法没有执行。
  -->
<!--    <bean id="accountService" class="cn.demo.service.impl.AccountServiceImplOfSetMethod">-->
<!--        <property name="id" value="1"></property>-->
<!--        <property name="username" value="Rose"></property>-->
<!--        <property name="password" value="5201314"></property>-->
<!--        <property name="birthday" ref="now"></property>-->
<!--    </bean>-->

    <bean id="accountService" class="cn.demo.service.impl.AccountServiceImplOfOtherType">
        <!-- String[]-->
        <property name="str_Array">
           <array>
               <value>AAA</value>
               <value>BBB</value>
               <value>CCC</value>
           </array>
        </property>
        <property name="list">
            <list>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </list>
        </property>
        <property name="set">
            <set>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </set>
        </property>
        <property name="map">
            <map>
                <entry key="1" value="AAA"></entry>
                <entry key="2" value="BBB"></entry>
                <entry key="3" value="CCC"></entry>
            </map>
        </property>
        <property name="properties">
            <props>
                <prop key="jdbc.driver">com.mysql.cj.jdbc.Driver</prop>
                <prop key="jdbc.url">jdbc:mysql://localhost:3306/xxx?serverTimezone=GMT%2B8</prop>
                <prop key="jdbc.username">root</prop>
                <prop key="jdbc.password">123456</prop>
            </props>
        </property>
    </bean>


</beans>