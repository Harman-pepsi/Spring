<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="accountDao" class="cn.demo.dao.impl.AccountDaoImpl"></bean>

    <bean id="logger" class="cn.demo.logger.Logger"></bean>

    <!-- 基于Spring中XML的AOP配置
        1.把通知的Bean也交给spring来管理
        2.使用aop:config标签表明开始AOP的配置
        3.使用aop:aspect标签表明配置切面
            id属性:是给切面提供一个唯一标识
            ref属性:是指定通知类bean的id
        4.在aop:aspect标签的内部使用对应标签来配置通知的类型
            我们现在示例是让printLog方法在切入点方法执行之前：所以是前置通知
            aop:before:表示前置通知
                method属性:用于指定Logger类中哪个方法是前置通知
                pointcut属性:用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强
             切入点表达式:
                关键字:execution(表达式)
                表达式:
                    访问修饰符 返回值 包名.包名.包名...类名.方法名(参数列表)
                标准的表达式写法:
                    public void com.AccountServiceImpl.saveAccount()
                访问修饰符可以省略
                    void com.AccountServiceImpl.saveAccount()
                返回值可以使用通配符‘*’
                    * com.AccountServiceImpl.saveAccount()
                 包名可以使用通配符，表示任意包 但是有几级包，就需要写几个*
                    * *.*.*.*.AccountServiceImpl.saveAccount();
                 包名可以使用..表示当前包及其子包
                    * *..AccountServiceImpl.saveAccount();
                 类名和方法都可以使用*来实现通配
                 * *..*.*()
                 参数列表:
                    可以直接写数据类型:
                        基本类型可以直接写:int
                        引用类型写包名.类名的方式 java.lang.String
                全通配写法
                    * *..*.*(..)
         需要导包:
            <dependency>
                <groupId>cglib</groupId>
                <artifactId>cglib</artifactId>
                <version>3.3.0</version>
            </dependency>
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjweaver</artifactId>
                <version>1.9.5</version>
            </dependency>
        -->

    <aop:config>
        <aop:aspect id="logAdvice" ref="logger">
<!--            <aop:before method="printLog" pointcut="execution(public void cn.demo.dao.impl.AccountDaoImpl.saveAccount())"></aop:before>-->
            <aop:before method="printLog" pointcut="execution(* *..*.*(..))"></aop:before>
<!--            <aop:after method="printLog" pointcut="execution(* *..*.*(..))"></aop:after>-->
        </aop:aspect>
    </aop:config>
</beans>